name: Release

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: ffxiv-vr # Replace with your solution name, i.e. MyWpfApp.sln.

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev\"

      - name: Build
        run: |
          dotnet build --configuration Release --nologo

      - name: Test
        run: dotnet test

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest
          path: .\FfxivVr\bin\x64\Release\FfxivVR\latest.zip
          if-no-files-found: error

      - name: Prepare Release
        id: prepare_release
        run: powershell release/Release.ps1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.VERSION_STRING }}
          release_name: FFXIV VR ${{ steps.prepare_release.outputs.VERSION_STRING }}
          body_path: release/changelog.txt
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .\FfxivVr\bin\x64\Release\FfxivVR\latest.zip
          asset_name: FfxivVR.zip
          asset_content_type: application/zip
      - name: Push Release to Github
        run: |
          git push origin master
          git push origin tag ${{ steps.prepare_release.outputs.VERSION_STRING }}
